$ mkdir 01_boot_from_fd_2.6
$ export KBUILD_OUTPUT=`pwd`/01_boot_from_fd_2.6
$ echo $KBUILD_OUTPUT
/home/msakamoto/reduced.linux/01_boot_from_fd_2.6
$ cd linux-2.6.38.2/
$ make help
...
   # "make O=/foo/bar" としてmakeの都度ディレクトリを指定する方法もありますが、
   # 今回は使いません。
...
$ make allnoconfig


  # change target directory
$ export KBUILD_OUTPUT=...
$ echo $KBUILD_OUTPUT
$ cd linux-xxx-xxx-xxx
$ make allnoconfig
$ cd ../[target directory]
$ make menucinfig

---------------------- Raspberry Pi network configure --------------

1. /etc/network/interface

auto lo

iface lo inet loopback
#iface eth0 inet dhcp

# allow-hotplug wlan0
# iface wlan0 inet manual
# wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
#iface default inet dhcp
auto eth0
iface eth0 inet static
address 192.168.11.10 # command address
netmask 255.255.255.0 
network 192.168.11.0  # router network
broadcast 192.168.11.255 
gateway 192.168.11.1  # router gateway
dns-search pc-links.com
dns-nameserver 192.168.11.1

2. /etc/resolv.conf
nameserver 8.8.8.8

3. /etc/init.d/networking restart


/*global download emacs*/
M-x install-elisp-from-emacswiki
anything.el
anything-gtags.el

/*global download*/
http://www.gnu.org/software/global/global.html
download -

$ cp global.x.x.x/gtags.el ~/.emacs.d/auto-install/

------------------------------------------------

After command Top source directry input next command.
--
$ gtags -v
$ htags -saF (The source cord publish html format.)

------------------------------------------------

compile linux kernel
version linux_2.6.39
$ make mrproper
$ make localmodconfig (make menuconfig)
$ make -j3

------------------------------------------------
gcc install old version
--
$ sudo apt-get install gcc-x.x (ex-> gcc-4.6)

command is gcc-x.x
rename command is
--> $ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-x.x 50

------------------------------------------------
linux kernel image search
--
$apt-cache search linux-image

------------------------------------------------
linux deb package need build & install.
--
必要な物をインストール
$ sudo apt-get install libncurses5-dev          # コンソールベースの設定に必要
$ sudo apt-get install kernel-package          # debパッケージの作成に必要
$ sudo apt-get install fakeroot                   # debパッケージの作成に必要
$ sudo apt-get install dpkg-dev                   # debパッケージの作成に必要

------------------------------------------------
linux kernel compile
/* kernel compile became failed that is gcc compiler more newly. */
/* downgrade gcc version. */
/* linux kernel compile version 2.6.32.63 */
/* gcc compiler version is 4.6.3 */
$ make clean
$ make mrproper
$ make localmodconfig
$ make -j3
$ sudo make modules_install
$ sudo make deb-pkg
/* install debpackage. */
$ sudo dpkg -i linux-image-<カーネルバージョン>.deb

--> reboot computer. check kernel version command.
$ uname -a

------------------------------------------------
linux kernel patch 2.6.x.x
$ wget www.kernel.org/pub/linux/devel/binutils/linux-2.6-seg-5.patch
$ patch -Np1 -i linux-2.6-seg-5.patch

------------------------------------------------
grub comfiguretion
--
/etc/default/grub
--> GRUB_DEFAULT=x (x is default number or default kernel name or saved.
                    -->saved is previous boot kernel next boot.)
GRUB_HIDDEN_TIMEOUT=0
--> #GRUB_HIDDEN_TIMEOUT=0
#GRUB_GFXMODE=1280x1080
--> GRUB_GFXMODE=1280x1080

------------------------------------------------
grep found under derectory in the file.

$ find /etc -type f -print | xargs grep hoge /dev/null "*.*"

find コマンドで /etc 以下の通常のファイル(ディレクトリなど以外)を探し(-type f)、ファイル名を表示させます(-print)。
xargs コマンドは find の出力したファイル名を展開しつつ、

grep hoge /dev/nlll ファイル名リスト

というコマンドを実行します。

------------------------------------------------
$ gcc -nostdlib -Wl,--oformat=binary -o バイナリ名 ソースファイル名
上記のようにすれば、素のバイナリが出力されるという事でした。
つまりELFコンテナではないアセンブラソースに記述されている命令がそのままバイナリで出力されるという事。

$ gcc -nostdlib -Wl,--oformat=binary -o main main.c